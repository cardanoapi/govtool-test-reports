{"uid":"7221dd697054c35f","name":"test_initialized_getVotingPower[registered_drep1]","fullName":"test_cases.test_drep#test_initialized_getVotingPower","historyId":"6ad61c71ce4fa2608a4cb34a76fb935a","time":{"start":1713252297350,"stop":1713252297491,"duration":141},"status":"failed","statusMessage":"AssertionError: Expected GET/drep/get-voting-power to succeed but got statusCode:500 : body:Pattern match failure in 'do' block at src/VVA/DRep.hs:49:3-24","statusTrace":"govtool_api = <test_cases.govtool_api.GovToolApi object at 0x7f3991298ad0>\nregistered_drep = {'drepId': 'ecaad9d12e9af29bc4c62769a824be0bfbe82460e879c047f61d5dd3', 'metadataHash': '1111111111111111111111111111111111111111111111111111111111111111', 'url': 'https://bit.ly/3zCH2HL'}\n\n    @allure.story(\"Drep\")\n    def test_initialized_getVotingPower(govtool_api, registered_drep):\n>       response = govtool_api.drep_get_voting_power(registered_drep[\"drepId\"])\n\ntest_cases/test_drep.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_cases/govtool_api.py:66: in drep_get_voting_power\n    return self.__get('/drep/get-voting-power', drep_id)\ntest_cases/govtool_api.py:57: in __get\n    return self.__request('GET', endpoint, param)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_cases.govtool_api.GovToolApi object at 0x7f3991298ad0>\nmethod = 'GET', endpoint = '/drep/get-voting-power'\nparam = 'ecaad9d12e9af29bc4c62769a824be0bfbe82460e879c047f61d5dd3', body = None\n\n    def __request(self, method: str, endpoint: str, param: Any | None = None,\n                  body: Any | None = None) -> Response:\n        endpoint = endpoint if endpoint.startswith('/') else '/' + endpoint\n        full_url = self._base_url + endpoint\n        full_url = full_url + \"/\" + param if param else full_url\n        start_time = int(time.time()*1000000)\n    \n        response = self._session.request(method, full_url, json=body)\n    \n        end_time = int(time.time()*1000000)\n        response_time = end_time - start_time\n    \n        try:\n            response_json = json.dumps(response.json())\n            response_json_str = response_json[:200]\n        except:\n            response_json_str = \"Something went wrong\"\n    \n        request_info = {\n            \"method\": method,\n            \"endpoint\": endpoint,\n            \"path_param\": param,\n            \"json\": json.dumps(body),\n            \"status_code\": response.status_code,\n            \"response_json\": response_json_str,\n            \"response_time\": response_time,\n            \"start_date\": int(start_time),\n            \"build_id\": BUILD_ID\n        }\n    \n        self.requests_log.append(request_info)\n    \n>       assert 200 >= response.status_code <= 299, f\"Expected {method}{endpoint} to succeed but got statusCode:{response.status_code} : body:{response.text}\"\nE       AssertionError: Expected GET/drep/get-voting-power to succeed but got statusCode:500 : body:Pattern match failure in 'do' block at src/VVA/DRep.hs:49:3-24\n\ntest_cases/govtool_api.py:53: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"govtool_api","time":{"start":1713252294784,"stop":1713252294784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"registered_drep","time":{"start":1713252297157,"stop":1713252297157,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"registered_drep::0","time":{"start":1713252297496,"stop":1713252297496,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"govtool_api::0","time":{"start":1713252297679,"stop":1713252298244,"duration":565},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 911, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/govtool/govtool/tests/govtool-backend/test_cases/conftest.py\", line 52, in govtool_api\n    print(response.json())\n          ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"story","value":"Drep"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_drep"},{"name":"host","value":"fv-az1077-528"},{"name":"thread","value":"1645-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_drep"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"registered_drep","value":"{'drepId': 'ecaad9d12e9af29bc4c62769a824be0bfbe82460e879c047f61d5dd3', 'url': 'https://bit.ly/3zCH2HL', 'metadataHash': '1111111111111111111111111111111111111111111111111111111111111111'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7221dd697054c35f.json","parameterValues":["{'drepId': 'ecaad9d12e9af29bc4c62769a824be0bfbe82460e879c047f61d5dd3', 'url': 'https://bit.ly/3zCH2HL', 'metadataHash': '1111111111111111111111111111111111111111111111111111111111111111'}"]}